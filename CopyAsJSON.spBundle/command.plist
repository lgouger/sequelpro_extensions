<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>author</key>
	<string>Larry Gouger</string>
	<key>category</key>
	<string>Copy</string>
	<key>command</key>
	<string>#!/usr/bin/env perl

#  Sample Output
#  {
#    "data": [
#      {
#        "integer": 42,
#        "string": "sample",
#        "NULL": null,
#        "float": 3.141592,
#        "date": "2013-05-25 14:15:05",
#        "boolean": true
#      }
#    ]
#  }

$ENV{LANG}="en_US.UTF-8";

binmode(STDIN, ":utf8");
use open ':encoding(utf8)'; 

# read first line to get the column names (header)
$firstLine = &lt;&gt;;

# bail if nothing could read
if (!defined($firstLine)) {
	exit 0;
}

# store the column names
chomp($firstLine);
$firstLine =~ s/\"/\\\"/g;  # escape "
my $num_columns = @header = split(/\t/, $firstLine);

# get the column definitions
open(META, $ENV{"SP_BUNDLE_INPUT_TABLE_METADATA"}) or die $!;
@meta = ();
while (&lt;META&gt;) {
	chomp();
	my @arr = split(/\t/);
	push @meta, \@arr;
}
close(META);


open(PB, "|pbcopy") or die $!;

print PB "{\n  \"data\": [\n";

# read row data of each selected row
$rowData=&lt;&gt;;
while ($rowData) {

	print PB "    {\n";

	# remove line ending
	chomp($rowData);

	# split column data which are tab-delimited
	@data = split(/\t/, $rowData);

	for (my $i=0; $i &lt; $num_columns; $i++) {

		# escape \t and \n and "
		$cellData = $data[$i];
		$cellData =~ s/\\/\\\\/g;
		$cellData =~ s/\"/\\\"/g;
		$cellData =~ s/↵/\n/g;
		$cellData =~ s/⇥/\t/g;

		print PB "      \"$header[$i]\": ";

		# to see the type information...
		# print PB "(", join(",", @{$meta[$i]}), ") ";

		# check for data types
		if ($cellData eq "NULL") {
			print PB "null";
		} elsif ($meta[$i]-&gt;[1] eq "bit") {
			printf(PB "%s", ($cellData eq "1" ? "true" : "false"));
		} elsif ($meta[$i]-&gt;[1] eq "integer") {
			if ($meta[$i]-&gt;[0] eq "TINYINT") {
				printf(PB "%s", ($cellData eq "1" ? "true" : "false"));
			} else {
				printf(PB "%d", $cellData);
			}
		} elsif ($meta[$i]-&gt;[1] eq "float") {
			printf(PB "%f", $cellData);
		} else {
			print PB "\"$cellData\"";
		}

		# suppress last ,
		if ($i &lt; $#data) {
			print PB ",";
		}

		print PB "\n";
	}

	print PB "    }";

	# get next row
	$rowData = &lt;&gt;;

	# suppress last ,
	if ($rowData) {
		print PB ",";
	}

	print PB "\n";
}

print PB "  ]\n}";

close PB;</string>
	<key>contact</key>
	<string>lgouger@gmail.com</string>
	<key>defaultBundleWasModified</key>
	<true/>
	<key>description</key>
	<string>Copies the selected rows in a data table to clipboard as JSON (UTF8 Encoded

Version 1.1
(excludes any BLOB data)</string>
	<key>input</key>
	<string>selectedtablerowsastab</string>
	<key>internalKeyEquivalent</key>
	<dict>
		<key>characters</key>
		<string>C</string>
		<key>keyCode</key>
		<integer>8</integer>
		<key>modifierFlags</key>
		<integer>262144</integer>
	</dict>
	<key>isDefaultBundle</key>
	<true/>
	<key>keyEquivalent</key>
	<string>^c</string>
	<key>name</key>
	<string>Copy as JSON</string>
	<key>output</key>
	<string>none</string>
	<key>scope</key>
	<string>datatable</string>
	<key>tooltip</key>
	<string>Copies the selected rows to clipboard as JSON (UTF8 Encoded)</string>
	<key>uuid</key>
	<string>CBB8B7A7-5AB9-4F4C-A404-D99CA9521337</string>
</dict>
</plist>
